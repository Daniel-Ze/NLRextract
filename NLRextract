#!/bin/bash
########################################################### To get the script running
NLRextracthome=~/Programs/NLRextract           # edit this line
########################################################### and put the folder in PATH

# HMMs
NBARChmm=$NLRextracthome/hmm/NB-ARC_pfam.hmm
CChmm=$NLRextracthome/hmm/Rx_N.hmm
TIRhmm=$NLRextracthome/hmm/TIR_pfam.hmm
RPW8hmm=$NLRextracthome/hmm/RPW8_pfam.hmm
LRR=$NLRextracthome/hmm/LRR/LRR.hmm
MADA=$NLRextracthome/hmm/mada.hmm

# R scripts
plotNLR=$NLRextracthome/plotNLR.r
vennNLR=$NLRextracthome/vennNLR.r

# Define a help funktion
helpFunction()
{
   echo ""
   echo "Usage: $(basename -- "$0") -c 1 -p protein.fa -s suffix"
   echo -e "\t-c number of CPUs to use"
   echo -e "\t-p path to the protein multifasta"
   echo -e "\t-s suffix for folder"
   exit 1 # Exit script after printing help
}

# Parse the parameters
while getopts "c:p:s:" opt
do
   case "$opt" in
      c ) parameterC="$OPTARG" ;;
      p ) parameterP="$OPTARG" ;;
      s ) parameterS="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

which Rscript > /dev/null
if [ $? -eq 0 ]; then
   echo -e "# Found Rscript in your path."
else
   echo -e "Didn't find Rscript in your path."
   helpFunction
fi

which hmmsearch > /dev/null
if [ $? -eq 0 ]; then
   echo -e "# Found hmmsearch in your path."
else
   echo -e "Didn't find hmmsearch in your path."
   helpFunction
fi


# Print helpFunction in case parameters are empty
if [ -z "$parameterP" ]
then
   echo "No protein file supplied.";
   helpFunction
fi

if [ -z "$parameterS" ]
then
  echo "# No suffix provided. Generating a unique random identifier."
  parameterS=$(cat /dev/urandom | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 6; echo)
fi

if [ -z "$parameterC" ]
then
  echo "# Nothing supplied for number of CPU. Running on 1 core."
  parameterC=1
fi

if [ -d $(dirname $parameterP)"/NLRextract_"$parameterS ]
then
  echo "# A folder with the same name already exists. Exiting."
  exit 1
fi
# Begin script in case all parameters are correct

wd=$(dirname $parameterP)/
in=$(basename -- "$parameterP")
echo "# Working directory:           $wd"
echo "# Protein multifasta:          $parameterP"
echo "# Number of cores used:        $parameterC"
echo "# Suffix for resutls folder:   $parameterS"

echo -e "# NLR domain HMMs check:"
if [ -f $NBARChmm ] || [ -f $CChmm ] || [ -f $TIRhmm ] || [ -f $RPW8hmm ] || [ -f $LRR ]
then
  printf "\t \xE2\x9C\x94 "$(basename -- "$NBARChmm")"\n"
  printf "\t \xE2\x9C\x94 "$(basename -- "$CChmm")"\n"
  printf "\t \xE2\x9C\x94 "$(basename -- "$TIRhmm")"\n"
  printf "\t \xE2\x9C\x94 "$(basename -- "$RPW8hmm")"\n"
  printf "\t \xE2\x9C\x94 "$(basename -- "$LRR")"\n"
else
  echo "# One or more HMMs were not found. Exiting."
  exit 1
fi

mkdir -p $wd"NLRextract_"$parameterS"/stats"
mkdir -p $wd"NLRextract_"$parameterS"/hmmer"
mkdir -p $wd"NLRextract_"$parameterS"/seqname"
mkdir -p $wd"NLRextract_"$parameterS"/name"

NLREX=$wd"NLRextract_"$parameterS"/"
HMMER=$wd"NLRextract_"$parameterS"/hmmer/"
SEQNA=$wd"NLRextract_"$parameterS"/seqname/"
NAME=$wd"NLRextract_"$parameterS"/name/"
STATS=$wd"NLRextract_"$parameterS"/stats/"

echo ""
if [ $wd == '.' ]
then
  touch $in.stats
  touch $in.stderr
else
  touch $STATS'nlr.stats'
  touch $NLREX'nlr.stderr'
fi

echo "# $(grep -E "^>" $parameterP | wc -l) sequences in multi fasta"

######################################################################################################################################################
# 1. Checking the whole dataset for NB-ARC, CC, TIR, RPW8 and LRR domains:
# searching the fa file for NB-ARC domain containing sequences:
echo "NBARC HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC --max --tblout $HMMER'nb.out.tbl' -o $HMMER'nb.out' $NBARChmm $parameterP 2>> $NLREX'nlr.stderr'

grep -v "^#" $HMMER'nb.out.tbl' | awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'nb.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "#\t$(wc -l < $SEQNA'nb.out.seqname') sequences with NB-ARC domain"

echo -e "NB-ARC\n$(cat $SEQNA'nb.out.seqname')" > $NAME'nb.out.name'

echo -e "$(wc -l < $SEQNA'nb.out.seqname')\tNB-ARC" >> $STATS'nlr.stats'

    #awk -F'>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $1.nb.out.seqname $1 > $1.nb.out.fa

# searching the fa file for CC domain containing sequences:
echo "CC HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC --max --tblout $HMMER'cc.out.tbl' -o $HMMER'cc.out' $CChmm $parameterP 2>> $NLREX'nlr.stderr'

grep -v "^#" $HMMER'cc.out.tbl' | awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'cc.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "#\t$(wc -l < $SEQNA'cc.out.seqname') sequences with CC domain"

echo -e "CC\n$(cat $SEQNA'cc.out.seqname')" > $NAME'cc.out.name'

echo -e "$(wc -l < $SEQNA'cc.out.seqname')\tCC" >> $STATS'nlr.stats'

    #awk -F'>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $input.cc.out.seqname $input > $input.cc.out.fa

# searching the fa file for TIR domain containing sequences:
echo "TIR HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC --max --tblout $HMMER'tir.out.tbl' -o $HMMER'tir.out' $TIRhmm $parameterP 2>> $NLREX'nlr.stderr'

grep -v "^#" $HMMER'tir.out.tbl' | awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'tir.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "#\t$(wc -l < $SEQNA'tir.out.seqname') sequences with TIR domain"

echo -e "TIR\n$(cat $SEQNA'tir.out.seqname')" > $NAME'tir.out.name'

echo -e "$(wc -l < $SEQNA'tir.out.seqname')\tTIR" >> $STATS'nlr.stats'

    #awk -F'>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $input.tir.out.seqname $input > $input.tir.out.fa

# searching the fa file for RPW8 domain containing sequences:
echo "RPW8 HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC --max --tblout $HMMER'rpw8.out.tbl' -o $HMMER'rpw8.out' $RPW8hmm $parameterP 2>> $NLREX'nlr.stderr'

grep -v "^#" $HMMER'rpw8.out.tbl' | awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'rpw8.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "#\t$(wc -l < $SEQNA'rpw8.out.seqname') sequences with RPW8 domain"

echo -e "RPW8\n$(cat $SEQNA'rpw8.out.seqname')" > $NAME'rpw8.out.name'

echo -e "$(wc -l < $SEQNA'rpw8.out.seqname')\tRPW8" >> $STATS'nlr.stats'

    #awk -F'>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $input.rpw8.out.seqname $input > $input.rpw8.out.fa

# searching the fa file for LRR domain containing sequences:
echo "LRR HMM search" 2>> $NLREX'nlr.stderr'
hmmscan --cpu $parameterC --max --tblout $HMMER'lrr.out.tbl' -o $HMMER'lrr.out' $LRR $parameterP 2>> $NLREX'nlr.stderr'

grep -v "^#" $HMMER'lrr.out.tbl' | awk '($5 + 0.0 < 0.01) { print $3 }' | uniq  > $SEQNA'lrr.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "#\t$(wc -l < $SEQNA'lrr.out.seqname') sequences with LRR domain"

echo -e "LRR\n$(cat $SEQNA'lrr.out.seqname')" > $NAME'lrr.out.name'

echo -e "$(wc -l < $SEQNA'lrr.out.seqname')\tLRR" >> $STATS'nlr.stats'

    #awk -F'>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $input.lrr.out.seqname $input > $input.lrr.out.fa

echo "#"

######################################################################################################################################################
# plot some stuff
echo "# running R scripts" 2>> $NLREX'nlr.stderr'
Rscript $vennNLR $NAME'nb.out.name' $NAME'cc.out.name' $NAME'tir.out.name' $NAME'rpw8.out.name' $NAME'lrr.out.name' --save 2>> $NLREX'nlr.stderr'

mkdir -p $wd"NLRextract_"$parameterS"/fasta"

FASTA=$wd"NLRextract_"$parameterS"/fasta/"

NLRprotein=$NAME*.protein
for f in $NLRprotein
do
  echo $(basename -- "$f")
  file=$(basename -- "$f")
  echo -e "$(wc -l < $f)\t$(basename -- "$f")" >> $STATS'nlr.stats'
  awk '{print $2}' $f > $NLREX'tmp'
  cat $NLREX'tmp' | xargs -I % grep -E % $wd$parameterP > $NLREX'tmp1'
  awk -F'^>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' $NLREX'tmp1' $parameterP > $FASTA$file.fa
  rm $NLREX'tmp'
  rm $NLREX'tmp1'
done

Rscript $plotNLR $STATS'nlr.stats' --save 2>> $NLREX'nlr.stderr'
exit 0
######################################################################################################################################################
