#!/bin/bash
########################################################### To get the script running
NLRextracthome=~/test           # edit this line
########################################################### and put the folder in PATH

miniconda=~/miniconda3/etc/profile.d/conda.sh

if [[ -f $miniconda ]]; then
    echo "$miniconda exists."
    source $miniconda
else
    echo -e "[error]\tCould not find miniconda install."
    exit 1
fi

# HMMs
NBARChmm=$NLRextracthome/hmm/NB-ARC_pfam.hmm
CChmm=$NLRextracthome/hmm/Rx_N.hmm
TIRhmm=$NLRextracthome/hmm/TIR_pfam.hmm
RPW8hmm=$NLRextracthome/hmm/RPW8_pfam.hmm
LRR=$NLRextracthome/hmm/LRR/LRR.hmm
MADA=$NLRextracthome/hmm/mada.hmm

# R scripts
plotNLR=$NLRextracthome/plotNLR.r
vennNLR=$NLRextracthome/vennNLR.r

# Define a help funktion
helpFunction()
{
   echo ""
   echo -e "\tNLRextract will run hmmersearch and search for the"
   echo -e "\tHMMs located in $NLRextracthome/hmm/."
   echo -e "\tMake sure that supply a protein multifasta file."
   echo ""
   echo "Usage: $(basename -- "$0") -p protein.fa"
   echo -e "\t-c number of CPUs to use (default: 1) "
   echo -e "\t-p path to the protein multifasta (mandatory)"
   echo -e "\t-s suffix for folder (default: random string)"
   echo -e "\t-e conda environment (default: NLRextract)"
   echo ""
   exit 1 # Exit script after printing help
}

################################################################################################
# Parse the parameters
#

while getopts "c:e:p:s:" opt
do
   case "$opt" in
      c ) parameterC="$OPTARG" ;;
      e ) parameterE="$OPTARG" ;;
      p ) parameterP="$OPTARG" ;;
      s ) parameterS="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

# Check the software requirements
if [ -z "$parameterE" ]
then
    echo -e "[info]\tNo conda environment name supplied. Defaulting to: NRLextract"
    parameterE=NLRextract
    echo -e "[info]\tActivating conda environment $parameterE:"
else
    echo -e "[info]\tActivating conda environment $parameterE:"
fi
conda activate $parameterE

which Rscript > /dev/null
if [ $? -eq 0 ]; then
   echo -e "[info]\t - Found Rscript in your path."
else
   echo -e "[error]\tDidn't find Rscript in your path."
   helpFunction
fi

which hmmsearch > /dev/null
if [ $? -eq 0 ]; then
   echo -e "[info]\t - Found hmmsearch in your path."
else
   echo -e "[error]\tDidn't find hmmsearch in your path."
   helpFunction
fi

which bedtools > /dev/null
if [ $? -eq 0 ]; then
    echo -e "[info]\t - Found bedtools in your path."
else
    echo -e "[error]\tDind't find bedtools in your path."
    helpFunction
fi

# Print helpFunction in case parameters are empty
if [ -z "$parameterP" ]
then
   echo -e "[error]\tNo protein file supplied.";
   helpFunction
fi

if [ -z "$parameterS" ]
then
  echo -e "[info]\tNo suffix provided. Generating a unique random identifier."
  parameterS=$(cat /dev/urandom | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 6; echo)
fi

if [ -z "$parameterC" ]
then
  echo -e "[info]\tNothing supplied for number of CPU. Running on 1 core."
  parameterC=1
fi

if [ -d $(dirname $parameterP)"/NLRextract_"$parameterS ]
then
  echo -e "[error]\tA folder with the same name already exists. Exiting."
  helpFunction
fi

#
# Finished parsing paramters
###################################################################################################
# Print summary of parameters
#

wd=$(dirname $parameterP)/
in=$(basename -- "$parameterP")
echo -e "[info]\tWorking directory:           $wd"
echo -e "[info]\tProtein multifasta:          $parameterP"
echo -e "[info]\tNumber of cores used:        $parameterC"
echo -e "[info]\tSuffix for resutls folder:   $parameterS"

echo -e "[info]\tNLR domain HMMs check:"
if [ -f $NBARChmm ] || [ -f $CChmm ] || [ -f $TIRhmm ] || [ -f $RPW8hmm ] || [ -f $LRR ]
then
  printf "[info]\t \xE2\x9C\x94 "$(basename -- "$NBARChmm")"\n"
  printf "[info]\t \xE2\x9C\x94 "$(basename -- "$CChmm")"\n"
  printf "[info]\t \xE2\x9C\x94 "$(basename -- "$TIRhmm")"\n"
  printf "[info]\t \xE2\x9C\x94 "$(basename -- "$RPW8hmm")"\n"
  printf "[info]\t \xE2\x9C\x94 "$(basename -- "$LRR")"\n"
else
  echo -e "[error]\tOne or more HMMs were not found."
  echo -e "[error]\tCheck if a folder with the necessary HMMs is present in $NLRextracthome."
  echo -e "[error]\tIf not clone the github repository again. Exiting."
  exit 1
fi

mkdir -p $wd"NLRextract_"$parameterS"/stats"
mkdir -p $wd"NLRextract_"$parameterS"/hmmer"
mkdir -p $wd"NLRextract_"$parameterS"/seqname"
mkdir -p $wd"NLRextract_"$parameterS"/name"

NLREX=$wd"NLRextract_"$parameterS"/"
HMMER=$wd"NLRextract_"$parameterS"/hmmer/"
SEQNA=$wd"NLRextract_"$parameterS"/seqname/"
NAME=$wd"NLRextract_"$parameterS"/name/"
STATS=$wd"NLRextract_"$parameterS"/stats/"

if [ $wd == '.' ]
then
  touch $in.stats
  touch $in.stderr
else
  touch $STATS'nlr.stats'
  touch $NLREX'nlr.stderr'
fi

echo -e "[info]\t$(grep -E "^>" $parameterP | wc -l) sequences in multi fasta"

######################################################################################################################################################
# Checking the whole dataset for NB-ARC, CC, TIR, RPW8 and LRR domains:
# 1. searching the fa file for NB-ARC domain containing sequences:
echo -e "[info]\tNBARC HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC \
          --max \
          --tblout $HMMER'nb.out.tbl' \
          --domtblout $HMMER'nb.out.dom.tbl' \
          -o $HMMER'nb.out' $NBARChmm $parameterP 2>> $NLREX'nlr.stderr'

#   - Format the hmmsearch ouput to gff3 format
grep -v '^#' $HMMER'nb.out.dom.tbl' | \
    awk '{if($7 < 0.01 && $14 > 20) {print $0}}' | \
    awk '{print $1"\tNLRextract\tNB-ARC\t"$18"\t"$19"\t"$7"\t+\t.\tName="$4";ID="$1"_"$5"_"$4}' \
    > $HMMER'nb.out.dom.gff'

#   - Extract sequence of identfied domains
bedtools getfasta -fi $parameterP \
                  -fo $HMMER'nb.out.dom.fa' \
                  -bed $HMMER'nb.out.dom.gff'

grep -v "^#" $HMMER'nb.out.tbl' | \
    awk '{if($5 + 0.0 < 0.01 && $9 > 20) { print $1 }}' > $SEQNA'nb.out.seqname' 2>> $NLREX'nlr.stderr'
echo -e "[info]\t$(wc -l < $SEQNA'nb.out.seqname') sequences with NB-ARC domain"
echo -e "NB-ARC\n$(cat $SEQNA'nb.out.seqname')" > $NAME'nb.out.name'
echo -e "$(wc -l < $SEQNA'nb.out.seqname')\tNB-ARC" >> $STATS'nlr.stats'

# 2. searching the fa file for CC domain containing sequences:
echo -e "[info]\tCC HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC \
          --max \
          --tblout $HMMER'cc.out.tbl' \
          --domtblout $HMMER'cc.out.dom.tbl' \
          -o $HMMER'cc.out' $CChmm $parameterP 2>> $NLREX'nlr.stderr'

#   - Format the hmmsearch output to gff3 format
grep -v '^#' $HMMER'cc.out.dom.tbl' | \
    awk '{if($7 < 0.01 && $14 > 10) {print $0}}' | \
    awk '{print $1"\tNLRextract\tCC\t"$18"\t"$19"\t"$7"\t+\t.\tName="$4";ID="$1"_"$5"_"$4}' \
    > $HMMER'cc.out.dom.gff'


bedtools getfasta -fi $parameterP \
                  -fo $HMMER'cc.out.dom.fa' \
                  -bed $HMMER'cc.out.dom.gff'

grep -v "^#" $HMMER'cc.out.tbl' | \
    awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'cc.out.seqname' 2>> $NLREX'nlr.stderr'
echo -e "[info]\t$(wc -l < $SEQNA'cc.out.seqname') sequences with CC domain"
echo -e "CC\n$(cat $SEQNA'cc.out.seqname')" > $NAME'cc.out.name'
echo -e "$(wc -l < $SEQNA'cc.out.seqname')\tCC" >> $STATS'nlr.stats'

# 3. searching the fa file for TIR domain containing sequences:
echo -e "[info]\tTIR HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC \
          --max \
          --tblout $HMMER'tir.out.tbl' \
          --domtblout $HMMER'tir.out.dom.tbl' \
          -o $HMMER'tir.out' $TIRhmm $parameterP 2>> $NLREX'nlr.stderr'

#   - Format the hmmsearch output to gff3 format
grep -v '^#' $HMMER'tir.out.dom.tbl' | \
    awk '{if($7 < 0.01 && $14 > 20) {print $0}}' | \
    awk '{print $1"\tNLRextract\tTIR\t"$18"\t"$19"\t"$7"\t+\t.\tName="$4";ID="$1"_"$5"_"$4}' \
    > $HMMER'tir.out.dom.gff'

bedtools getfasta -fi $parameterP \
                  -fo $HMMER'tir.out.dom.fa' \
                  -bed $HMMER'tir.out.dom.gff'

grep -v "^#" $HMMER'tir.out.tbl' | \
    awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'tir.out.seqname' 2>> $NLREX'nlr.stderr'
echo -e "[info]\t$(wc -l < $SEQNA'tir.out.seqname') sequences with TIR domain"
echo -e "TIR\n$(cat $SEQNA'tir.out.seqname')" > $NAME'tir.out.name'
echo -e "$(wc -l < $SEQNA'tir.out.seqname')\tTIR" >> $STATS'nlr.stats'

# 4. searching the fa file for RPW8 domain containing sequences:
echo -e "[info]\tRPW8 HMM search" 2>> $NLREX'nlr.stderr'
hmmsearch --cpu $parameterC \
          --max \
          --tblout $HMMER'rpw8.out.tbl' \
          --domtblout $HMMER'rpw8.out.dom.tbl' \
          -o $HMMER'rpw8.out' $RPW8hmm $parameterP 2>> $NLREX'nlr.stderr'

#   - Format the hmmsearch output to gff3 format
grep -v '^#' $HMMER'rpw8.out.dom.tbl' | \
    awk '{if($7 + 0.0 < 0.01 && $14 > 40) {print $0}}' | \
    awk '{print $1"\tNLRextract\tRPW8\t"$18"\t"$19"\t"$7"\t+\t.\tName="$4";ID="$1"_"$5"_"$4}' \
    > $HMMER'rpw8.out.dom.gff'

bedtools getfasta -fi $parameterP \
                  -fo $HMMER'rpw8.out.dom.fa' \
                  -bed $HMMER'rpw8.out.dom.gff'

grep -v "^#" $HMMER'rpw8.out.tbl' | \
    awk '($5 + 0.0 < 0.01) { print $1 }' > $SEQNA'rpw8.out.seqname' 2>> $NLREX'nlr.stderr'
echo -e "[info]\t$(wc -l < $SEQNA'rpw8.out.seqname') sequences with RPW8 domain"
echo -e "RPW8\n$(cat $SEQNA'rpw8.out.seqname')" > $NAME'rpw8.out.name'
echo -e "$(wc -l < $SEQNA'rpw8.out.seqname')\tRPW8" >> $STATS'nlr.stats'

# 5. searching the fa file for LRR domain containing sequences:
echo -e "[info]\tLRR HMM search" 2>> $NLREX'nlr.stderr'
hmmscan --cpu $parameterC \
        --max \
        --tblout $HMMER'lrr.out.tbl' \
        --domtblout $HMMER'lrr.out.dom.tbl' \
        -o $HMMER'lrr.out' $LRR $parameterP 2>> $NLREX'nlr.stderr'

#   - Format the hmmscan output to gff3 format
grep -v '^#' $HMMER'lrr.out.dom.tbl' | \
    awk '{if($7 + 0.0 < 0.01) {print $0}}' | \
    sort -k4 | \
    awk '{print $4"\tNLRextract\tLRR\t"$18"\t"$19"\t"$7"\t+\t.\tName="$1";ID="$4"_"$2"_"$1}' \
    > $HMMER'lrr.out.dom.gff'

grep -v "^#" $HMMER'lrr.out.tbl' | \
    awk '($5 + 0.0 < 0.01) { print $3 }' | \
    uniq  > $SEQNA'lrr.out.seqname' 2>> $NLREX'nlr.stderr'

echo -e "[info]\t$(wc -l < $SEQNA'lrr.out.seqname') sequences with LRR domain"
echo -e "LRR\n$(cat $SEQNA'lrr.out.seqname')" > $NAME'lrr.out.name'
echo -e "$(wc -l < $SEQNA'lrr.out.seqname')\tLRR" >> $STATS'nlr.stats'

echo "#"
#
# Finished searching for domains
######################################################################################################################################################
# Combine functional domain information and plot stats
#
echo -e "[info]\tRunning vennNLR.r" 2>> $NLREX'nlr.stderr'
Rscript $vennNLR $NAME'nb.out.name' \
        $NAME'cc.out.name' \
        $NAME'tir.out.name' \
        $NAME'rpw8.out.name' \
        $NAME'lrr.out.name' --save 2>> $NLREX'nlr.stderr'

mkdir -p $wd"NLRextract_"$parameterS"/fasta"
mkdir -p $wd"NLRextract_"$parameterS"/domain"
mkdir -p $wd"NLRextract_"$parameterS"/gff"

FASTA=$wd"NLRextract_"$parameterS"/fasta/"
DOMAIN=$wd"NLRextract_"$parameterS"/domain/"
GFF=$wd"NLRextract_"$parameterS"/gff/"

DOMAINseqs=$HMMER*.fa
for f in $DOMAINseqs
do
    mv $f $DOMAIN
done

NLRprotein=$NAME*.protein
for f in $NLRprotein
do
  echo $(basename -- "$f")
  file=$(basename -- "$f")
  echo -e "$(wc -l < $f)\t$(basename -- "$f")" >> $STATS'nlr.stats'
  awk '{print $2}' $f | \
      xargs -I % grep -E % $parameterP | \
      cut -d '>' -f2 | \
      awk -F '^>' 'NR==FNR{ids[$0]; next} NF>1{f=($2 in ids)} f' - $parameterP > $FASTA$file.fa
done

#Rscript $plotNLR $STATS'nlr.stats' --save 2>> $NLREX'nlr.stderr'

#######################################################################################################
#
# Search for mada motif in CC containing proteins:
#   - Select all protein sequence files with CC in the name
#   - Run hmmsearch with the published MADA motif
#   - Format the hmmsearch output to gff3
#   - Use bedtools to extract the sequence of the identfied motif

CCprot=$FASTA*CC*.fa
for f in $CCprot
do
    file=$(basename -- "$f")
    echo $file
    
    hmmsearch --cpu $parameterC \
              --max \
              --tblout $HMMER$file"mada.out.tbl" \
              --domtblout $HMMER$file"mada.out.dom.tbl" -o $HMMER$file"mada.out" $MADA $f

    grep -v '^#' $HMMER$file'mada.out.dom.tbl' | \
    awk '{if($7 + 0.0 < 0.01 && $14 > 9) {print $0}}' | \
    awk '{print $1"\tNLRextract\tMADA\t"$18"\t"$19"\t"$7"\t+\t.\tName="$4";ID="$1"_"$4"_"$8}' \
    > $HMMER$file'mada.out.dom.gff'

    bedtools getfasta -fi $parameterP -bed $HMMER$file'mada.out.dom.gff' >> $DOMAIN"mada.dom.fa"
    
    domain=$(echo $file | awk '{split($0,a,"."); split(a[1],b,"_"); for(x in b){print b[x]}}' ORS="_")"MADA.protein"

    echo -e "$(wc -l < $HMMER$file'mada.out.dom.gff')\t$domain" >> $STATS'nlr.stats'
done

Rscript $plotNLR $STATS'nlr.stats' --save 2>> $NLREX'nlr.stderr'
#
# Make a complete gff file from all domain annotations
#   - Extract NLR associated LRR domain annotations from LRR.gff file
#   - Create complete NLR gff file
#   - move everything to folder gff/
#
echo -e "[info]\tCombining annotations in single gff3 file."
all_nlr=$( ls $NAME*.protein | grep -vw LRR.protein )
for f in $all_nlr
do
    cat $f >> $NAME'all.protein'
done

cut -f2 $NAME"all.protein" | xargs -I % grep -w % $HMMER"lrr.out.dom.gff" > $HMMER"nlr_lrr.out.dom.gff"
mv $HMMER"lrr.out.dom.gff" $HMMER"lrr.out.dom.gff.bak"

GFFfiles=$HMMER*.gff
for f in $GFFfiles
do
    cat $f >> $GFF"all_nlr.gff"
    mv $f $GFF
done
#
# Use bedtools for sorting the complete NLR gff file
#
echo -e "[info]\tSorting gff3 file"
bedtools sort -i $GFF"all_nlr.gff" > $GFF"all_nlr.sort.gff"

mkdir -p $wd"NLRextract_"$parameterS"/clust/"
CLUST=$wd"NLRextract_"$parameterS"/clust/"

#
# Create alignments and phylogenetic trees of functional domain sequences
#   - Alignment with clustalo
#   - Phylogenetic tree with clustalw2
#
echo -e "[info]\tCreate sequence alignments and phylogenetic trees of functional domains"
for f in $DOMAIN*.fa
do
    file=$(basename -- $f)
    clustalo -i $f \
             --iter=3 \
             --outfile=$CLUST$file'.align' \
             --outfmt=fa >> $CLUST"clustalo.out.log"
    clustalw2 -TREE \
              -OUTPUTTREE=nexus \
              -TYPE=PROTEIN \
              -OUTPUT=NEXUS \
              -BOOTSTRAP=1000 \
              -SEED=33 \
              -BOOTLABELS=branch \
              -infile=$CLUST$file'.align' >> $CLUST"clustalw2.out.log"
done

echo -e "[info]\tAnalysis finished."

